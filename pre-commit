#!/bin/sh


set -eu


# Log an error to stderr.
log_error()
{
	>&2 echo "[ERROR] $*"
}


# For a given number, log an error and exit with the number as exit status.
log_exit()
{
	exit_status="$1"

	log_error ""
	log_error "Commit failed with exit status $exit_status."
	log_error "Fix the errors and commit again."

	exit "$exit_status"
}


# Is it a kind of file for which we want to check the content?
should_check_file_content()
{
	file_name="$1"

	# Hardcoding the extensions is not an ideal solution, but this is done due
	# to lack of a better alternative.
	ext_regexp='.*\.(jpg|JPG|png|PNG)$'

	if echo "$file_name" | grep --extended-regexp --regexp "$ext_regexp" > /dev/null; then
		return 1;
	else
		return 0;
	fi
}


# Check that the names of the files staged do not contain non-ascii characters
# and exit with non-zero status otherwise.
check_ascii_filenames()
{
	if test "$(
		git diff --staged --name-only -z \
			| LC_ALL=C tr -d '[ -~]\0' \
			| wc -c
	)" != 0; then
		log_error "All file names should contain only non-ascii characters."
		log_exit 1
	fi
}


# Check that file names do not contain whitespaces, and exit with non-zero
# status otherwise.
check_no_space_filenames()
{
	if test "$(
		git diff --staged --name-only \
			| grep " " \
			| wc -c
	)" != 0; then
		log_error "File names should not contain whitespaces."
		log_exit 2
	fi
}


# Check that the files staged contain no whitespace errors or conflict markers
# and exit with non-zero status if this does not hold.
check_no_whitespaces_or_conflict_markers()
{
	if ! git diff --check --staged; then
		log_exit 3
	fi
}


# Check that the files staged end with a newline and exit with non-zero status
# otherwise.
check_newline_eof()
{
	has_bad_files=0

	for file in $(git diff --staged --name-only); do
		if ! [ -e "$file" ] || ! should_check_file_content "$file"; then
			continue
		fi

		trailing_byte="$(git show :"$file" | tail --bytes 1)"

		if test "$(echo "$trailing_byte" | wc -w)" != 0; then
			log_error "File '$file' does not end with a new line."
			has_bad_files=1
		fi
	done

	if [ "$has_bad_files" -ne 0 ]; then
		log_exit 4
	fi
}


# Check that none of the files staged contain tab characters, and exit with
# non-zero status otherwise.
check_no_tabs()
{
	has_bad_files=0

	for file in $(git diff --staged --name-only); do
		if ! [ -e "$file" ] || ! should_check_file_content "$file"; then
			continue
		fi

		n_tabs="$(
			git show :"$file" \
				| grep "$(printf '\t')" --only-matching \
				| wc -c
		)"

		if [ "$n_tabs" -ne 0 ]; then
			log_error "Found tabs in file '$file'."
			has_bad_files=1
		fi
	done

	if [ "$has_bad_files" -ne 0 ]; then
		log_exit 5
	fi
}


# Return zero if the file given as an argument is recognized by clang-format,
# otherwise exit with non-zero status.
is_clang_formattable()
{
	file_name="$1"

	# Hardcoding the extensions is not an ideal solution, but this is done due
	# to lack of a better alternative.
	ext_regexp='.*\.(java|mjs|js|ts|json|m|mm|proto|protodevel|td|textpb|pb\.txt|textproto|asciipb|sv|svh|v|vh)$'

	if echo "$file_name" | grep --extended-regexp --regexp "$ext_regexp" > /dev/null; then
		return 0;
	else
		return 1;
	fi
}


# Check that the lines that differ between the files that are to be staged and
# the HEAD follow the clang-format rules. Return non-zero exit status if they
# do not.
check_clang_format()
{
	if [ -z "$(which clang-format)" ]; then
		log_error "Cannot find 'clang-format'. Is it installed?"
		log_exit 6
	fi

	bad_files=""

	for file in $(git diff --staged --name-only); do
		if ! is_clang_formattable "$(basename "$file")" || ! [ -e "$file" ]; then
			continue
		fi

		file_name="$(basename "$file")"
		dir_name="$(dirname "$file")"

		# The 'trap' command is there to make sure that the temporary files will
		# get deleted eventually.
		original=$(mktemp --tmpdir="$dir_name" --suffix="_$file_name")
		formatted=$(mktemp --tmpdir="$dir_name" --suffix="_$file_name")
		trap 'rm -f "$original" "$formatted"' EXIT INT QUIT TERM

		# We fill the two files to compare.
		git show :"$file" >"$original"
		clang-format "$original" >"$formatted"

		exit_status=0
		diff "$original" "$formatted" > /dev/null || exit_status=$?

		if [ $exit_status -eq 1 ]; then
			log_error "File '$file' does not follow the clang-format rules."
			bad_files="$bad_files \"$file\""
		elif [ $exit_status -ne 0 ]; then
			log_error "Unexpected error when checking formatting of '$file'."
			log_exit 7
		fi

		rm -f "$original"
		rm -f "$formatted"
	done

	if [ -n "$bad_files" ]; then
		log_error ""
		log_error "Run this command to fix the file(s) and commit again:"
		echo "  $ clang-format -i$bad_files"
		log_exit 8
	fi
}


main()
{
	check_ascii_filenames
	check_no_space_filenames
	check_no_whitespaces_or_conflict_markers
	check_newline_eof
	check_no_tabs
	check_clang_format
}


main
