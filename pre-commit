#!/bin/sh


set -eu


# Log an error to stderr.
log_error()
{
	>&2 echo "[ERROR] $*"
}


# For a given number, log an error and exit with the number as exit status.
log_exit()
{
	exit_status="$1"

	log_error ""
	log_error "Commit failed with exit status $exit_status."
	log_error "Fix the errors and commit again."

	exit "$exit_status"
}


# Check that the names of the files staged do not contain non-ascii characters
# and exit with non-zero status otherwise.
check_ascii_filenames()
{
	if test "$(
		git diff --staged --name-only -z \
			| LC_ALL=C tr -d '[ -~]\0' \
			| wc -c
	)" != 0; then
		log_error "All file names should contain only non-ascii characters."
		log_exit 1
	fi
}


# Check that file names do not contain whitespaces, and exit with non-zero
# status otherwise.
check_no_space_filenames()
{
	if test "$(
		git diff --staged --name-only \
			| grep " " \
			| wc -c
	)" != 0; then
		log_error "File names should not contain whitespaces."
		log_exit 2
	fi
}


# Check that the files staged contain no whitespace errors or conflict markers
# and exit with non-zero status if this does not hold.
check_no_whitespaces_or_conflict_markers()
{
	if ! git diff --check --staged; then
		log_exit 3
	fi
}


# Check that the files staged end with a newline and exit with non-zero status
# otherwise.
check_newline_eof()
{
	has_bad_files=0

	for file in $(git diff --staged --name-only); do
		trailing_byte="$(git show :"$file" | tail --bytes 1)"

		if test "$(echo "$trailing_byte" | wc -w)" != 0; then
			log_error "File '$file' does not end with a new line."
			has_bad_files=1
		fi
	done

	if [ "$has_bad_files" -ne 0 ]; then
		log_exit 4
	fi
}


# Check that none of the files staged contain tab characters, and exit with
# non-zero status otherwise.
check_no_tabs()
{
	has_bad_files=0

	for file in $(git diff --staged --name-only); do
		n_tabs="$(
			git show :"$file" \
				| grep "$(printf '\t')" --only-matching \
				| wc -c
		)"

		if [ "$n_tabs" -ne 0 ]; then
			log_error "Found tabs in file '$file'."
			has_bad_files=1
		fi
	done

	if [ "$has_bad_files" -ne 0 ]; then
		log_exit 5
	fi
}


# Check that the lines that differ between the files that are to be staged and
# the HEAD follow the clang-format rules. Return non-zero exit status if they
# do not.
check_clang_format()
{
	if [ -z "$(which git-clang-format)" ]; then
		log_error "Cannot find 'git-clang-format'. Is it installed?"
		log_exit 6
	fi

	bad_files=""

	for file in $(git diff --staged --name-only); do
		if test -n "$(git clang-format --staged --diff --quiet -- "$file")"; then
			log_error "Changes in '$file' do not follow the clang-format rules."
			bad_files="$bad_files \"$file\""
		fi
	done

	if [ -n "$bad_files" ]; then
		log_error ""
		log_error "Run this command to fix the file and commit again."
		echo " clang-format -i$bad_files \\"
		echo " && git add$bad_files"
		log_exit 7
	fi
}


main()
{
	check_ascii_filenames
	check_no_space_filenames
	check_no_whitespaces_or_conflict_markers
	check_newline_eof
	check_no_tabs
	check_clang_format
}


main
